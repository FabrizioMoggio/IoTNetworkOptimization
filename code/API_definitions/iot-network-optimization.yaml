---
openapi: 3.0.3
############################################################################
#                                     API info                             #
############################################################################
info:
  title: IoT Network Optimization API
  description: |
    ## Overview
    The IoT Network Optimization API provides the API Consumer with the
    capabilities of activating IoT-specific features for a fleet of devices.
    ## Introduction
    The scenario a Service Provider that partners with a Telco Operator to
    deploy IoT devices (e.g., sensors, trackers) across the Telco’s nationwide
    cellular network.
    To ensure prolonged device battery life and operational efficiency, the
    Service Provider seeks to activate power-saving configurations for its IoT
    fleet during periods of low activity or based on predefined thresholds.
    The Service Provider’s management system invokes the IoT Network
    Optimization API to dynamically adjust network connectivity parameters.
    This includes optimizing data transmission intervals, reducing signal
    strength during idle phases, and scheduling sleep cycles for devices
    without disrupting critical service functionality. The API evaluates
    network conditions, device locations, and application requirements to apply
    energy-efficient settings while maintaining guaranteed quality-of-service
    levels. By leveraging the API, the Provider ensures IoT devices consume
    minimal power during operation, significantly extending battery lifetimes
    and reducing energy costs. The optimization accounts for both device-level
    energy savings and reduced overhead on the Telco’s network infrastructure
    (e.g., lower RAN utilization during sleep cycles). Clients benefit from
    uninterrupted service with no manual
    intervention, aligning sustainability goals with operational reliability.\
    \
    **Example use case and flow:**\
    \
    [**Service**](https://github.com/camaraproject/\
    IoTNetworkOptimization/blob/main/documentation/API_documentation/\
    IoT_Network_Optimization_UserStory_UseCase_1.md)\
    \
    **The main elements of the IoT Network Optimization API are:**\
    \
    **PowerSavingRequest:**
    Provides to the API Producer the intention of a enabling or disabling power
    saving features for a specific set of IoT devices.\
    \
    **PowerSavingResponse:**
    Provides to the API Consumer the status of the power-saving feature
    activation based on the related transaction.\
    # Authorization and authentication
    The "Camara Security and Interoperability Profile" provides details on how
    an API consumer requests an access token. Please refer to Identify and
    Consent Management
    (https://github.com/camaraproject/IdentityAndConsentManagement/)
    for the released version of the profile.\
    \
    The specific authorization flows to be used will be agreed upon during the
    onboarding process, happening between the API consumer and the API
    provider, taking into account the declared purpose for accessing the API,
    whilst also being subject to the prevailing legal framework dictated by
    local legislation.\
    \
    In cases where personal data is processed by the API and users can
    exercise their rights through mechanisms such as opt-in and/or opt-out,
    the use of three-legged access tokens is mandatory. This ensures that
    the API remains in compliance with privacy regulations, upholding the
    principles of transparency and user-centric privacy-by-design.
    ## API Documentation
    ## Details
    The IoT Network Optimization API provides the API Consumer with the
    capability to activate and manage IoT-specific network features for a fleet
    of connected devices. The API enables optimized power consumption
    transmission by leveraging network-level configurations tailored for IoT
    deployments.

    The IoT API allows an IoT Service Provider to dynamically adjust network
    parameters to optimize device performance and reduce operational overhead.
    The IoT API Consumer (typically the IoT Service Provider or a third-party
    management system) invokes the API with identifiers for the target IoT
    devices. The API then applies the requested optimizations, such as enabling
    low-power modes for battery-operated sensors.

    By using the IoT Network Optimization API, Service Providers can ensure
    their IoT deployments operate at peak efficiency extending device battery
    life and improving overall service reliability.

    The IoT Network Optimization API is an intent based API.
    \
    The IoT Network Optimization API supports the following Intent:
    - Intent1: I would like to activate power-saving features for my IoT
    devices during a specified period.

    The inputs for the above intent are:
    - IoT devices (e.g., device identifiers like IPs or SIM phone number)
    - power-saving desired status
    - time frame (e.g., start/end timestamps)

    The output for the above intent are:
    - activation status (success/failure per device or group)
    - transaction ID for tracking

    The related endpoint is:
    - Intent: /features/power-saving

    ## Additional CAMARA error responses
    The list of error codes in this API specification is not exhaustive.
    Therefore the API specification may not document some non-mandatory error
    statuses as indicated in `CAMARA API Design Guidelines`.

    Please refer to [CAMARA_common.yaml]({link_to_release}/CAMARA_common.yaml)
    for a complete list of error responses.

    As a specific rule, error `501 - NOT_IMPLEMENTED` can be only a possible
    error response if it is explicitly documented in the API.
    ## FAQ's
    (FAQs will be added in a later version of the documentation)
    ## Release Notes
    First draft for the IoT Network Optimization API.

  version: wip
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-camara-commonalities: 0.5
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/IoTNetworkOptimization
############################################################################
#                                     Servers                              #
############################################################################
servers:
  - url: "{apiRoot}/iot-network-opt/vwip"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root for the Energy Footprint Notification API
security:
  - notificationsBearerAuth: []
tags:
  - name: Power Saving
    description: Enable/Disable power-saving features.
############################################################################
#                                     Paths                                #
############################################################################
paths:
  /features/power-saving:
    post:
      tags:
        - Power Saving
      summary: Activate or de-activate power-saving features for IoT devices
      operationId: activatePowerSaving
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - oAuth2:
            - 'iot-management:power-saving:write'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerSavingRequest'
      responses:
        "200":
          description: Power-saving feature request sent successfully
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerSavingResponse'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "501":
          $ref: "#/components/responses/Generic501"
      callbacks:
        onTransactionCompleted:
          $ref: "#/components/callbacks/onTransactionCompleted"

  /features/power-saving/transactions/{transactionId}:
    get:
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - $ref: '#/components/parameters/x-correlator'
      tags:
        - Power Saving
      summary: Get status of a transaction for power-saving features
      operationId: getPowerSaving
      security:
        - oAuth2:
            - 'iot-management:power-saving:read'
      responses:
        "200":
          description: Power-saving features activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerSavingResponse'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "501":
          $ref: "#/components/responses/Generic501"

############################################################################
#                                 Components                               #
############################################################################
components:
  securitySchemes:
    oAuth2:
      type: oauth2
      description: This API uses OAuth 2
        [More info](https://api.example.com/docs/auth)
      flows:
        clientCredentials:
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            'iot-management:power-saving:read':
              Grants access to read-only data in the Power Saving resources
            'iot-management:power-saving:write':
              Grants write access to the Power Saving resources
    notificationsBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#/sinkCredential.credentialType}"
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"
  #########################################################################
  #                             Events/Callbacks                          #
  #########################################################################
  callbacks:
    onTransactionCompleted:
      # when data is sent, it will be sent to the callback url provided
      '{$request.body.notificationSink.sink}':
        post:
          summary: Provides back the result of the analysis on the energy
           consumption
          description: once the system has calculated the energy consumption of
           the service, this information is provided back to the API Consumer
          operationId: energyConsumptionNotification
          parameters:
            - $ref: '#/components/parameters/x-correlator'
          security:
            - notificationsBearerAuth: []
          requestBody:
            description: payload containing the calculated energy consumption
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CloudEventPowerSaving'
          responses:
            '202':
              description: Your server implementation should return this HTTP
                status code if the data was received successfully
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'
            '204':
              description: Your server should return this HTTP status code if
               no longer interested in further updates
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'
  ############################################################################
  #                                 Resources                                #
  ############################################################################
  schemas:
    NotificationSink:
      description: ""
      type: object
      required:
        - sink
      properties:
        sink:
          description: 'https callback address where the notification must be
            POST-ed'
          type: string
        sinkCredentials:
          description: Sink credential provides authorization information
            necessary to enable delivery of events to a target
          type: object
          properties:
            credentialtype:
              type: string
              description: Type of the credential - MUST be set to ACCESSTOKEN
                for now
              enum:
                - "ACCESSTOKEN"
            accessToken:
              type: string
              description: Access Token granting access to the POST operation to
                create notification
            accessTokenExpireUtc:
              type: string
              format: date-time
              description: An absolute UTC instant at which the access token
                shall be considered expired.
            accessTokenType:
              type: string
              description: Type of access token - MUST be set to bearer for now
              enum:
                - "bearer"
    PowerSavingRequest:
      type: object
      required:
        - devices
        - enabled
        - notificationSink
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
          description: Device IDs or group identifiers
        enabled:
          type: boolean
        timePeriod:
          required:
            - startDate
          properties:
            startDate:
              type: string
              format: date-time
              description: An instant of time, starting of the TimePeriod.
            endDate:
              type: string
              format: date-time
              description: An instant of time, ending of the TimePeriod.
                If not included, then the period has no ending date.
        notificationSink:
          $ref: '#/components/schemas/NotificationSink'
    DateTime:
      type: string
      format: date-time
      description: |
        Timestamp of when the occurrence happened. Must adhere to RFC 3339.
        WARN: This optional field in CloudEvents specification is required in
        CAMARA APIs implementation.
      example: '2018-04-05T17:31:00Z'
    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened - be a non-empty
        `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"
    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - time
      properties:
        id:
          type: string
          description: identifier of this event, that must be unique in the
            source context.
          minLength: 1
        source:
          $ref: '#/components/schemas/Source'
        type:
          type: string
          description: 'type of event as defined in each CAMARA API'
          example: 'org.camaraproject.iot.dta-status-changed-event'
          minLength: 25
        specversion:
          type: string
          description: Version of the specification to which this event conforms
            (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          enum:
            - "1.0"
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding,
            must be "application/json" for CAMARA APIs'
          enum:
            - application/json
        data:
          type: object
          description: Event details payload described in each CAMARA API and
            referenced by its type
        time:
          $ref: "#/components/schemas/DateTime"

    CloudEventPowerSaving:
      description: provides back the power saving operation result.
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
      properties:
        data:
          $ref: "#/components/schemas/PowerSavingResponse"

    PowerSavingResponse:
      type: object
      properties:
        activationStatus:
          type: array
          items:
            $ref: '#/components/schemas/DeviceStatus'
        transactionId:
          type: string

    DeviceStatus:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
        status:
          type: string
          enum: [in-progress, success, failed]

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of
        devices include smartphones or IoT sensors/actuators.
        The developer can choose to provide the below specified device
        identifiers:
        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`
        NOTE1: the MNO might support only a subset of these options.
        The API invoker can provide multiple identifiers to be compatible
        across different MNOs. In this case the identifiers MUST belong to
        the same device.
        NOTE2: as for this Commonalities release, we are enforcing that the
        networkAccessIdentifier is only part of the schema for
        future-proofing, and CAMARA does not currently allow its use.
        After the CAMARA meta-release work is concluded and the relevant
        issues are resolved, its use will need to be explicitly documented
        in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1
    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In
        mobile networks it corresponds to the MSISDN (Mobile Station
        International Subscriber Directory Number). In order to be globally
        unique it has to be formatted in international format, according to
        E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"
    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile
        network. In 3GPP terminology, it corresponds to the GPSI formatted with
        the External Identifier ({Local Identifier}@{Domain Identifier}).
        Unlike the telephone number, the network access identifier is not
        subjected to portability ruling in force, and is individually managed
        by each operator.
      type: string
      example: "123456789@domain.com"
    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP
          address and port as seen by the application server, or the private
          (local) and any public (observed) IP addresses in use by the device
          (this information can be obtained by various means, for example from
          some DNS servers).
        If the allocated and observed IP addresses are the same (i.e. NAT is not
          in use) then  the same address should be specified for both
          publicAddress and privateAddress.
        If NAT64 is in use, the device should be identified by its publicAddress
          and publicPort, or separately by its allocated IPv6 address (field
          ipv6Address of the Device object)
        In all cases, publicAddress must be specified, along with at least one
          of either privateAddress or publicPort, dependent upon which is known.
          In general, mobile devices cannot be identified by their public IPv4
          address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765
    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"
    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535
    Protocol:
      description: The protocol for the influeced flow. It can be specified and
       it is identified by a string according to the column “Keyword” as defined
       by IANA (https://www.iana.org/assignments/protocol-numbers/\
       protocol-numbers.xhtml), e.g. UDP or TCP.
      type: string
      example: "TCP"
    DeviceIpv6Address:
      description: |
       The device should be identified by the observed IPv6 address, or by any
         single IPv6 address from within the subnet allocated to the device
         (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    TransactionId:
      type: string
      format: uuid
      description: Transaction identifier allocated for enabling/disabling IoT
        features
    XCorrelator:
      type: string
      pattern: ^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$
      example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
    ############################################################################
    #                                 Responses                                #
    ############################################################################
    ErrorInfo:
      description: error information
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or
                  query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a
                given field has has an unsupported value.
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: |
                Request cannot be authenticated and a new authentication is
                required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: |
                  Request not authenticated due to missing, invalid, or expired
                  credentials. A new authentication is required.
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have
                the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform
                  this action.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - UNKNOWN_APPLICATION_IDENTIFIER
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Application Identifier unknown
              value:
                status: 404
                code: UNKNOWN_APPLICATION_IDENTIFIER
                message: the target application is unknown.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided
                identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the
                  provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: the Application Identifier is not included in the
                request
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: unspecified Application Identifier.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a
                business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: Access to the API has been temporarily
                blocked due to rate or spike arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.
    Generic501:
      description: Not Implemented
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 501
                  code:
                    enum:
                      - NOT_IMPLEMENTED
          examples:
            GENERIC_501_NOT_IMPLEMENTED:
              description: Service not implemented. The use of this code
                should be avoided as far as possible to get the objective
                to reach aligned implementations
              value:
                status: 501
                code: NOT_IMPLEMENTED
                message: This functionality is not implemented yet.